// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScoringCard snapshot snapshot: scoring setting card 1`] = `
<SettingsOption
  className=""
  none={false}
  summary="{attempts, plural, =1 {# attempt} other {# attempts}} · {weight, plural, =0 {Ungraded} other {# points}}"
  title="Scoring"
>
  <Form.Label
    className="mb-4"
  >
    <FormattedMessage
      defaultMessage="Specify point weight and the number of answer attempts"
      description="Descriptive text for scoring settings"
      id="authoring.problemeditor.settings.scoring.label"
    />
  </Form.Label>
  <Form.Group>
    <Form.Control
      floatingLabel="Attempts"
      onChange={[MockFunction scoringCardHooks.handleMaxAttemptChange]}
      type="number"
      value={5}
    />
    <Form.Control.Feedback>
      <FormattedMessage
        defaultMessage="If a value is not set, unlimited attempts are allowed"
        description="Summary text for scoring weight"
        id="authoring.problemeditor.settings.scoring.attempts.hint"
      />
    </Form.Control.Feedback>
  </Form.Group>
  <Form.Group>
    <Form.Control
      floatingLabel="Points"
      onChange={[MockFunction scoringCardHooks.handleWeightChange]}
      type="number"
      value={1.5}
    />
    <Form.Control.Feedback>
      <FormattedMessage
        defaultMessage="If a value is not set, the problem is worth one point"
        description="Summary text for scoring weight"
        id="authoring.problemeditor.settings.scoring.weight.hint"
      />
    </Form.Control.Feedback>
  </Form.Group>
</SettingsOption>
`;

exports[`ScoringCard snapshot snapshot: scoring setting card max attempts 1`] = `
<SettingsOption
  className=""
  none={false}
  summary="Unlimited attempts · {weight, plural, =0 {Ungraded} other {# points}}"
  title="Scoring"
>
  <Form.Label
    className="mb-4"
  >
    <FormattedMessage
      defaultMessage="Specify point weight and the number of answer attempts"
      description="Descriptive text for scoring settings"
      id="authoring.problemeditor.settings.scoring.label"
    />
  </Form.Label>
  <Form.Group>
    <Form.Control
      floatingLabel="Attempts"
      onChange={[MockFunction scoringCardHooks.handleMaxAttemptChange]}
      type="number"
      value={0}
    />
    <Form.Control.Feedback>
      <FormattedMessage
        defaultMessage="If a value is not set, unlimited attempts are allowed"
        description="Summary text for scoring weight"
        id="authoring.problemeditor.settings.scoring.attempts.hint"
      />
    </Form.Control.Feedback>
  </Form.Group>
  <Form.Group>
    <Form.Control
      floatingLabel="Points"
      onChange={[MockFunction scoringCardHooks.handleWeightChange]}
      type="number"
      value={1.5}
    />
    <Form.Control.Feedback>
      <FormattedMessage
        defaultMessage="If a value is not set, the problem is worth one point"
        description="Summary text for scoring weight"
        id="authoring.problemeditor.settings.scoring.weight.hint"
      />
    </Form.Control.Feedback>
  </Form.Group>
</SettingsOption>
`;

exports[`ScoringCard snapshot snapshot: scoring setting card zero zero weight 1`] = `
<SettingsOption
  className=""
  none={false}
  summary="{attempts, plural, =1 {# attempt} other {# attempts}} · {weight, plural, =0 {Ungraded} other {# points}}"
  title="Scoring"
>
  <Form.Label
    className="mb-4"
  >
    <FormattedMessage
      defaultMessage="Specify point weight and the number of answer attempts"
      description="Descriptive text for scoring settings"
      id="authoring.problemeditor.settings.scoring.label"
    />
  </Form.Label>
  <Form.Group>
    <Form.Control
      floatingLabel="Attempts"
      onChange={[MockFunction scoringCardHooks.handleMaxAttemptChange]}
      type="number"
      value={5}
    />
    <Form.Control.Feedback>
      <FormattedMessage
        defaultMessage="If a value is not set, unlimited attempts are allowed"
        description="Summary text for scoring weight"
        id="authoring.problemeditor.settings.scoring.attempts.hint"
      />
    </Form.Control.Feedback>
  </Form.Group>
  <Form.Group>
    <Form.Control
      floatingLabel="Points"
      onChange={[MockFunction scoringCardHooks.handleWeightChange]}
      type="number"
      value={0}
    />
    <Form.Control.Feedback>
      <FormattedMessage
        defaultMessage="If a value is not set, the problem is worth one point"
        description="Summary text for scoring weight"
        id="authoring.problemeditor.settings.scoring.weight.hint"
      />
    </Form.Control.Feedback>
  </Form.Group>
</SettingsOption>
`;
