// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TinyMceWidget snapshots ImageUploadModal is not rendered 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <SourceCodeModal
    close={[MockFunction modal.closeModal]}
    editorRef={
      Object {
        "current": Object {
          "value": "something",
        },
      }
    }
    isOpen={false}
  />
  <Editor
    disabled={false}
    editorConfig={
      Object {
        "clearSelection": [MockFunction hooks.selectedImage.clearSelection],
        "content": undefined,
        "editorContentHtml": undefined,
        "editorRef": Object {
          "current": Object {
            "value": "something",
          },
        },
        "editorType": "text",
        "images": Object {
          "current": Array [
            Object {
              "externalUrl": "/assets/sOmEaSsET",
            },
          ],
        },
        "initializeEditor": undefined,
        "isLibrary": true,
        "lmsEndpointUrl": "sOmEvaLue.cOm",
        "minHeight": undefined,
        "openImgModal": [MockFunction modal.openModal],
        "openSourceCodeModal": [MockFunction modal.openModal],
        "placeholder": undefined,
        "selection": "hooks.selectedImage.selection",
        "setEditorRef": undefined,
        "setSelection": [MockFunction hooks.selectedImage.setSelection],
        "studioEndpointUrl": "sOmEoThERvaLue.cOm",
        "updateContent": [Function],
      }
    }
    id="sOMeiD"
    onEditorChange={[Function]}
  />
</Provider>
`;

exports[`TinyMceWidget snapshots SourcecodeModal is not rendered 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <ImageUploadModal
    clearSelection={[MockFunction hooks.selectedImage.clearSelection]}
    close={[MockFunction modal.closeModal]}
    editorRef={
      Object {
        "current": Object {
          "value": "something",
        },
      }
    }
    editorType="problem"
    images={
      Object {
        "current": Array [
          Object {
            "externalUrl": "/assets/sOmEaSsET",
          },
        ],
      }
    }
    isOpen={false}
    lmsEndpointUrl="sOmEvaLue.cOm"
    selection="hooks.selectedImage.selection"
    setSelection={[MockFunction hooks.selectedImage.setSelection]}
  />
  <Editor
    disabled={false}
    editorConfig={
      Object {
        "clearSelection": [MockFunction hooks.selectedImage.clearSelection],
        "content": undefined,
        "editorContentHtml": undefined,
        "editorRef": Object {
          "current": Object {
            "value": "something",
          },
        },
        "editorType": "problem",
        "images": Object {
          "current": Array [
            Object {
              "externalUrl": "/assets/sOmEaSsET",
            },
          ],
        },
        "initializeEditor": undefined,
        "isLibrary": false,
        "lmsEndpointUrl": "sOmEvaLue.cOm",
        "minHeight": undefined,
        "openImgModal": [MockFunction modal.openModal],
        "openSourceCodeModal": [MockFunction modal.openModal],
        "placeholder": undefined,
        "selection": "hooks.selectedImage.selection",
        "setEditorRef": undefined,
        "setSelection": [MockFunction hooks.selectedImage.setSelection],
        "studioEndpointUrl": "sOmEoThERvaLue.cOm",
        "updateContent": [Function],
      }
    }
    id="sOMeiD"
    onEditorChange={[Function]}
  />
</Provider>
`;

exports[`TinyMceWidget snapshots renders as expected with default behavior 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <ImageUploadModal
    clearSelection={[MockFunction hooks.selectedImage.clearSelection]}
    close={[MockFunction modal.closeModal]}
    editorRef={
      Object {
        "current": Object {
          "value": "something",
        },
      }
    }
    editorType="text"
    images={
      Object {
        "current": Array [
          Object {
            "externalUrl": "/assets/sOmEaSsET",
          },
        ],
      }
    }
    isOpen={false}
    lmsEndpointUrl="sOmEvaLue.cOm"
    selection="hooks.selectedImage.selection"
    setSelection={[MockFunction hooks.selectedImage.setSelection]}
  />
  <SourceCodeModal
    close={[MockFunction modal.closeModal]}
    editorRef={
      Object {
        "current": Object {
          "value": "something",
        },
      }
    }
    isOpen={false}
  />
  <Editor
    disabled={false}
    editorConfig={
      Object {
        "clearSelection": [MockFunction hooks.selectedImage.clearSelection],
        "content": undefined,
        "editorContentHtml": undefined,
        "editorRef": Object {
          "current": Object {
            "value": "something",
          },
        },
        "editorType": "text",
        "images": Object {
          "current": Array [
            Object {
              "externalUrl": "/assets/sOmEaSsET",
            },
          ],
        },
        "initializeEditor": undefined,
        "isLibrary": false,
        "lmsEndpointUrl": "sOmEvaLue.cOm",
        "minHeight": undefined,
        "openImgModal": [MockFunction modal.openModal],
        "openSourceCodeModal": [MockFunction modal.openModal],
        "placeholder": undefined,
        "selection": "hooks.selectedImage.selection",
        "setEditorRef": undefined,
        "setSelection": [MockFunction hooks.selectedImage.setSelection],
        "studioEndpointUrl": "sOmEoThERvaLue.cOm",
        "updateContent": [Function],
      }
    }
    id="sOMeiD"
    onEditorChange={[Function]}
  />
</Provider>
`;
